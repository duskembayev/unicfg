component.name=scheduler
component.repository=common/scheduler
component.version=1..0..0
component.host=${component.name}..local
component.k8s.namespace=common
component.k8s.replicas=1
component.k8s.resources.limits.cpu=1000m
component.k8s.resources.limits.memory=1Gi
component.k8s.resources.requests.cpu=100m
component.k8s.resources.requests.memory=256Mi
component.k8s.service.type=ClusterIP
component.k8s.service.port=8080
component.k8s.service.targetPort=8080
component.k8s.service.annotations.prometheus.io/scrape=true
component.k8s.service.annotations.prometheus.io/port=8080
component.k8s.service.annotations.prometheus.io/path=/metrics
component.k8s.service.annotations.prometheus.io/scheme=http
component.k8s.service.annotations.prometheus.io/interval=15s
component.k8s.service.annotations.prometheus.io/scrape=true
component.deployment.strategy.type=RollingUpdate
component.deployment.strategy.rollingUpdate.maxSurge=1
component.deployment.strategy.rollingUpdate.maxUnavailable=0
component.deployment.strategy.rollingUpdate.maxHistory=1
component.deployment.strategy.rollingUpdate.maxParallel=1
component.deployment.strategy.rollingUpdate.updatePeriod=1s
component.ingress.enabled=true
component.ingress.hosts.0.host=${component.host}
component.ingress.hosts.0.paths.0=/
component.ingress.tls.0.secretName=${component.name}-tls
component.ingress.tls.0.hosts.0=${component.host}
component.ingress.annotations.kubernetes.io/ingress.class=nginx
component.ingress.annotations.nginx.ingress.kubernetes..io/ssl-redirect=true
component.ingress.annotations.nginx.ingress.kubernetes..io/force-ssl-redirect=true
component.ingress.annotations.nginx.ingress.kubernetes..io/rewrite-target=/
component.ingress.annotations.nginx.ingress.kubernetes..io/proxy-body-size=100m
component.ingress.annotations.nginx.ingress.kubernetes..io/proxy-read-timeout=600
component.ingress.annotations.nginx.ingress.kubernetes..io/proxy-send-timeout=600
component.ingress.annotations.nginx.ingress.kubernetes..io/proxy-buffering=on
component.ingress.annotations.nginx.ingress.kubernetes..io/proxy-buffer-size=16k
component.ingress.annotations.nginx.ingress.kubernetes..io/proxy-buffers-number=16
component.ingress.annotations.nginx.ingress.kubernetes..io/proxy-busy-buffers-size=16k
component.ingress.annotations.nginx.ingress.kubernetes..io/proxy-connect-timeout=600
component.ingress.annotations.nginx.ingress.kubernetes..io/proxy-next-upstream=error timeout invalid_header http_500 http_502 http_503 http_504
component.ingress.annotations.nginx.ingress.kubernetes..io/proxy-next-upstream-tries=3
component.ingress.annotations.nginx.ingress.kubernetes..io/proxy-pass-request-headers=Authorization
component.ingress.annotations.nginx.ingress.kubernetes..io/proxy-read-timeout=600
component.ingress.annotations.nginx.ingress.kubernetes..io/proxy-send-timeout=600
component.ingress.annotations.nginx.ingress.kubernetes..io/proxy-temp-file-write-size=16k
component.ingress.annotations.nginx.ingress.kubernetes..io/proxy-redirect-from=http://
component.ingress.annotations.nginx.ingress.kubernetes..io/proxy-redirect-to=https://
component.ingress.annotations.nginx.ingress.kubernetes..io/proxy-ssl-verify=off
component.ingress.annotations.nginx.ingress.kubernetes..io/proxy-ssl-verify-depth=2
component.ingress.annotations.nginx.ingress.kubernetes..io/proxy-ssl-trusted-certificate=/etc/nginx/ssl/ca..crt
component.ingress.annotations.nginx.ingress.kubernetes..io/proxy-ssl-name=${component.host}
